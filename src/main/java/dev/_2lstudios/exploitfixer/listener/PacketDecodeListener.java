package dev._2lstudios.exploitfixer.listener;

import dev._2lstudios.exploitfixer.managers.ModuleManager;
import dev._2lstudios.exploitfixer.modules.impl.PacketsModule;
import dev._2lstudios.exploitfixer.utils.ExploitUtil;
import dev._2lstudios.exploitfixer.utils.ProtocolUtil;
import dev._2lstudios.hamsterapi.events.PacketDecodeEvent;
import dev._2lstudios.hamsterapi.hamsterplayer.HamsterPlayer;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.EmptyByteBuf;
import org.bukkit.entity.Player;
import org.bukkit.event.Cancellable;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;

public class PacketDecodeListener implements Listener {

    private static final String PREFIX = "[Decoder|Data] ";
    private static final String PREFIX_OFFLINE = "[Decoder|Offline] ";
    private final ExploitUtil exploitUtil;
    private final PacketsModule packetsModule;

    PacketDecodeListener(ExploitUtil exploitUtil, ModuleManager moduleManager) {
        this.exploitUtil = exploitUtil;
        this.packetsModule = moduleManager.getPacketsModule();
    }

    private String getName(Player player) {
        if (player == null) {
            return "unknown";
        }
        return player.getName();
    }

    private void onPacketDecode(Cancellable event, HamsterPlayer hamsterPlayer, Player player,
                                ByteBuf byteBuf) {
        if (player != null && player.isOnline()) {
            String playerName = player.getName();
            double dataVls = packetsModule.getDataVls();
            double dataVlMultiplier = packetsModule.getDataVlMultiplier();
            int dataBytes = packetsModule.getDataBytes();
            int refCnt = byteBuf.refCnt();
            int capacity = byteBuf.capacity();

            if (capacity < 0) {
                String reason = PREFIX + playerName
                        + " sent a packet with invalid capacity! capacity: " + capacity + " Vls: " + dataVls;

                exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, dataVls);
            } else if (refCnt < 1) {
                String reason = PREFIX + playerName + " sent a packet with invalid refCnt! refCnt: "
                        + refCnt + " Vls: " + dataVls;

                exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, dataVls);
            } else {
                int readableBytes = byteBuf.readableBytes();
                String reason;

                if (capacity > dataBytes) {
                    reason = PREFIX + playerName + " sent a packet that exceeds capacity bytes limit! " + capacity
                            + "/" + dataBytes + " Vls: " + dataVls;
                } else if (readableBytes > dataBytes) {
                    reason = PREFIX + playerName + " sent a packet that exceeds readable bytes limit! " + readableBytes
                            + "/" + dataBytes + " Vls: " + dataVls;
                } else {
                    if (!(byteBuf instanceof EmptyByteBuf)) {
                        int packetId = ProtocolUtil.readVarInt(byteBuf);

                        byteBuf.resetReaderIndex();

                        if (packetId == 18) {
                            return;
                        }
                    }

                    if (dataVlMultiplier > 0) {
                        exploitUtil.addVls(event, hamsterPlayer, player, capacity * dataVlMultiplier);
                    }

                    return;
                }

                exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, dataVls);
            }
        } else if (packetsModule.isOffline()) {
            String reason = PREFIX_OFFLINE + getName(player) + " sent a packet while being offline!";

            exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, 0);
        }
    }

    @EventHandler(ignoreCancelled = true, priority = EventPriority.LOWEST)
    public void onPacketDecode(PacketDecodeEvent event) {
        if (!packetsModule.isEnabled()) {
            return;
        }

        HamsterPlayer hamsterPlayer = event.getHamsterPlayer();
        ByteBuf byteBuf = event.getByteBuf().get();

        onPacketDecode(event, hamsterPlayer, hamsterPlayer.getPlayer(), byteBuf);
    }
}

package dev._2lstudios.exploitfixer.exploit;

import dev._2lstudios.exploitfixer.ExploitFixer;
import dev._2lstudios.exploitfixer.managers.ExploitPlayerManager;
import dev._2lstudios.exploitfixer.managers.ModuleManager;
import dev._2lstudios.exploitfixer.modules.IModule;
import dev._2lstudios.exploitfixer.modules.IViolationModule;
import dev._2lstudios.exploitfixer.modules.impl.MessagesModule;
import dev._2lstudios.exploitfixer.modules.impl.NotificationsModule;
import dev._2lstudios.hamsterapi.enums.PacketType;
import dev._2lstudios.hamsterapi.hamsterplayer.HamsterPlayer;
import dev._2lstudios.hamsterapi.wrappers.PacketWrapper;
import org.bukkit.Bukkit;
import org.bukkit.Server;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.Cancellable;
import org.bukkit.plugin.Plugin;
import org.bukkit.scheduler.BukkitScheduler;

import java.util.Collection;
import java.util.HashSet;
import java.util.Map;
import java.util.UUID;

public class BukkitExploitPlayer extends ExploitPlayer {
    private final Plugin plugin;
    private final ExploitPlayerManager exploitPlayerManager;
    private final MessagesModule messagesModule;
    private final NotificationsModule notificationsModule;

    public BukkitExploitPlayer(Plugin plugin, ModuleManager moduleManager, UUID uuid) {
        super(uuid);
        this.plugin = plugin;
        this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
        this.messagesModule = moduleManager.getMessagesModule();
        this.notificationsModule = moduleManager.getNotificationsModule();
    }

    public void addVls(Cancellable event, HamsterPlayer hamsterPlayer,
                       IViolationModule module, double amount) {
        addVls(event, null, hamsterPlayer, module, amount);
    }

    public void addVls(Cancellable event, PacketWrapper packet,
                       HamsterPlayer hamsterPlayer, IViolationModule module, double amount) {
        Violations violations = (Violations) module.getViolations();

        if (violations != null) {
            Map<IViolationModule, Double> violationsMap = getViolations();
            long currentTime = System.currentTimeMillis();
            long lastViolation = getLastViolation();

            if (currentTime - lastViolation >= 1000) {
                clearPunishments();
                setLastViolation(currentTime);

                for (IViolationModule violationModule : new HashSet<>(violationsMap.keySet())) {
                    double vls = violationsMap.get(violationModule) - violationModule.getReduceVls();

                    if (vls <= 0) {
                        violationsMap.remove(violationModule);
                    } else {
                        violationsMap.put(violationModule, vls);
                    }
                }
            }

            double newVls = getViolations(module) + amount;

            violationsMap.put(module, newVls);

            if (event != null && module.getCancelVls() <= newVls) {
                event.setCancelled(true);
            }

            for (int threshold : violations.getViolations()) {
                if (threshold <= newVls) {
                    Collection<String> commands = violations.getCommands(threshold);

                    punish(module, hamsterPlayer, packet, commands, (int) newVls);
                }
            }
        }
    }

    public void punish(IModule module, HamsterPlayer hamsterPlayer, PacketWrapper packet,
                       Collection<String> punishments, int newVls) {
        Collection<Collection<String>> punishmentsDone = this.getPunishments();

        if (!punishments.isEmpty() && !punishmentsDone.contains(punishments)) {
            Server server = plugin.getServer();
            CommandSender consoleSender = server.getConsoleSender();
            BukkitScheduler scheduler = server.getScheduler();
            Player player = hamsterPlayer.getPlayer();
            String playerName = player.getName();

            for (String punishment : punishments) {
                if (punishment.equals("kick")) {
                    String locale = getLocale();
                    String kickMessage = messagesModule.getKickMessage(module, locale);

                    Bukkit.getScheduler().runTask(ExploitFixer.getInstance(), () -> player.kickPlayer(kickMessage));

                    hamsterPlayer.closeChannel();
                } else if (punishment.equals("notification")) {
                    String moduleName = module.getName();

                    if (packet != null) {
                        PacketType packetType = packet.getType();

                        if (packetType != null) {
                            notificationsModule.sendNotification(packetType.toString(), this, newVls);
                        } else {
                            notificationsModule.sendNotification(moduleName, this, newVls);
                        }
                    } else {
                        notificationsModule.sendNotification(moduleName, this, newVls);
                    }
                } else {
                    String check_name = packet != null ? packet.getType().toString() : module.getName();
                    int ping = getPing();
                    String replacement_punishment = punishment
                            .replace("%player%", playerName)
                            .replace("%vls%", String.valueOf(newVls))
                            .replace("%ping%", String.valueOf(ping))
                            .replace("%check%", check_name);
                    if (server.isPrimaryThread()) {
                        server.dispatchCommand(consoleSender, replacement_punishment);
                    } else {
                        scheduler.runTask(plugin, () -> server.dispatchCommand(consoleSender, replacement_punishment));
                    }
                }
            }

            punishmentsDone.add(punishments);
            exploitPlayerManager.addPunishment();
        }
    }

    public Player getPlayer() {
        return plugin.getServer().getPlayer(getUUID());
    }

    public String getLocale() {
        Player player = getPlayer();

        /*
        if (player.isOnline()) {
            MethodHandle getLocaleMethod = ReflectionUtil.getLocalePlayerMethod();

            try {
                if (getLocaleMethod != null) {
                    locale = getLocaleMethod.invoke(player).toString();
                } else {
                    getLocaleMethod = ReflectionUtil.getLocaleSpigotMethod();
                    if (getLocaleMethod != null) {
                        locale = getLocaleMethod.invoke(player.spigot()).toString();
                    }
                }
            } catch (Throwable t) {
                //ignored
            }


            if (locale != null && locale.length() > 1) {
                locale = locale.substring(0, 2);
            }
        }
         */

        String locale = player.spigot().getLocale();
        if (locale != null && locale.length() > 1) {
            locale = locale.substring(0, 2);
        }

        return locale;
    }

    public int getPing() {
        Player player = getPlayer();

        /*
        if (player != null && player.isOnline()) {
            try {
                MethodHandle getHandleMethod = ReflectionUtil.getHandleMethod();

                Object playerHandle = getHandleMethod.invoke(player);

                return (int) ReflectionUtil.getPingField(playerHandle).get(playerHandle);
            } catch (Throwable ignored) {
                // Ignored
            }
        }
         */

        return player.spigot().getPing();
    }

    public String getName() {
        Player player = plugin.getServer().getPlayer(getUUID());

        if (player != null && player.isOnline()) {
            return player.getName();
        }

        return "N/A";
    }
}

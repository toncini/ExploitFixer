package dev._2lstudios.exploitfixer.modules.impl;

import dev._2lstudios.exploitfixer.configuration.IConfiguration;
import dev._2lstudios.exploitfixer.modules.IModule;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.*;
import org.bukkit.plugin.Plugin;

import java.util.Collection;
import java.util.List;
import java.util.Map.Entry;

public class ItemsFixModule implements IModule {
    private final Plugin plugin;
    private boolean enabled;
    private int enchantLimit;
    private int maxStackSize;
    private Collection<String> blacklist;

    public ItemsFixModule(Plugin plugin) {
        this.plugin = plugin;
    }

    public void reload(IConfiguration configYml) {
        String name = getName().toLowerCase();

        this.enabled = configYml.getBoolean(name + ".enabled");
        this.enchantLimit = configYml.getInt(name + ".enchant_limit");
        this.maxStackSize = configYml.getInt(name + ".max_stack_size");
        this.blacklist = configYml.getStringList(name + ".blacklist");
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }

    @Override
    public String getName() {
        return "ItemsFix";
    }

    public int getEnchantLimit() {
        return enchantLimit;
    }

    public int getMaxStackSize() {
        return maxStackSize;
    }

    public Collection<String> getBlacklist() {
        return blacklist;
    }

    public ItemStack fixItem(ItemStack item) {
        Material material = Material.getMaterial(item.getType().name());
        ItemMeta newItemMeta = plugin.getServer().getItemFactory().getItemMeta(material);
        short durability = item.getDurability();

        if (item.hasItemMeta()) {
            ItemMeta oldItemMeta = item.getItemMeta();
            String displayName = oldItemMeta.getDisplayName();
            List<String> lore = oldItemMeta.getLore();
            // This applies vanilla levels to enchants
            boolean ignoreLevelRestriction = enchantLimit > 0;

            if (oldItemMeta instanceof EnchantmentStorageMeta) {
                EnchantmentStorageMeta enchantmentStorageMeta = (EnchantmentStorageMeta) oldItemMeta;
                EnchantmentStorageMeta newEnchantmentStorageMeta = (EnchantmentStorageMeta) newItemMeta;

                for (Entry<Enchantment, Integer> entry : enchantmentStorageMeta.getStoredEnchants().entrySet()) {
                    Enchantment enchantment = entry.getKey();
                    int level = Math.min(entry.getValue(), enchantLimit > 0 ? enchantLimit : 5);

                    if (enchantLimit > -1 && level > -1) {
                        newEnchantmentStorageMeta.addStoredEnchant(enchantment, level, ignoreLevelRestriction);
                    }
                }

            } else {
                for (Entry<Enchantment, Integer> entry : item.getEnchantments().entrySet()) {
                    Enchantment enchantment = entry.getKey();
                    int level = Math.min(entry.getValue(), enchantLimit > 0 ? enchantLimit : 5);

                    if (enchantLimit > -1 && level > -1) {
                        newItemMeta.addEnchant(enchantment, level, ignoreLevelRestriction);
                    }
                }
            }

            if (newItemMeta instanceof BookMeta) {
                BookMeta oldBookMeta = (BookMeta) oldItemMeta;
                BookMeta newBookMeta = (BookMeta) newItemMeta;

                newBookMeta.setTitle(oldBookMeta.getTitle());
                newBookMeta.setAuthor(oldBookMeta.getAuthor());
                newBookMeta.setPages(oldBookMeta.getPages());
            } else if (newItemMeta instanceof SkullMeta) {
                SkullMeta oldSkullMeta = (SkullMeta) oldItemMeta;
                SkullMeta newSkullMeta = (SkullMeta) newItemMeta;

                newSkullMeta.setOwner(oldSkullMeta.getOwner());
            } else if (newItemMeta instanceof BannerMeta) {
                BannerMeta oldBannerMeta = (BannerMeta) oldItemMeta;
                BannerMeta newBannerMeta = (BannerMeta) newItemMeta;

                newBannerMeta.setBaseColor(oldBannerMeta.getBaseColor());
            } else if (newItemMeta instanceof LeatherArmorMeta) {
                LeatherArmorMeta oldLeatherArmorMeta = (LeatherArmorMeta) oldItemMeta;
                LeatherArmorMeta newLeatherArmorMeta = (LeatherArmorMeta) newItemMeta;

                newLeatherArmorMeta.setColor(oldLeatherArmorMeta.getColor());
            }

            if (displayName != null && displayName.getBytes().length < 128) {
                newItemMeta.setDisplayName(displayName);
            }

            if (lore != null && lore.toString().getBytes().length < 1024) {
                newItemMeta.setLore(lore);
            }
        }

        if (maxStackSize > 0 && item.getAmount() > maxStackSize) {
            item.setAmount(maxStackSize);
        }

        item.setType(material);
        item.setItemMeta(newItemMeta);
        item.setDurability(durability);

        return item;
    }
}

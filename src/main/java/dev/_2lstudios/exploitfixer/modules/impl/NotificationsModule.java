package dev._2lstudios.exploitfixer.modules.impl;

import dev._2lstudios.exploitfixer.configuration.IConfiguration;
import dev._2lstudios.exploitfixer.exploit.ExploitPlayer;
import dev._2lstudios.exploitfixer.modules.INotificationsModule;
import it.unimi.dsi.fastutil.objects.Object2IntMap;
import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
import org.bukkit.Server;
import org.bukkit.command.ConsoleCommandSender;
import org.bukkit.entity.Player;

import java.util.Collection;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;
import java.util.logging.Logger;

public class NotificationsModule implements INotificationsModule {
    private final Server server;
    private final Logger logger;
    private final Object2IntMap<String> packetDebug = new Object2IntOpenHashMap<>();
    private final Set<String> notifications = new HashSet<>();
    private boolean enabled, debug;
    private String message;

    public NotificationsModule(Server server, Logger logger) {
        this.server = server;
        this.logger = logger;
    }

    public String getMessage() {
        return message;
    }

    public void reload(IConfiguration configYml) {
        this.enabled = configYml.getBoolean("notifications.enabled");
        this.debug = configYml.getBoolean("notifications.debug");
        this.message = configYml.getString("notifications.message").replace('&', '\u00A7');
    }

    @Override
    public boolean isEnabled() {
        return this.enabled;
    }

    public void addPacketDebug(String packetType) {
        if (this.debug) {
            packetDebug.put(packetType, packetDebug.getOrDefault(packetType, 0) + 1);
        }
    }

    public void debugPackets() {
        if (this.debug && !packetDebug.isEmpty()) {
            Set<Entry<String, Integer>> entries = new HashSet<>(packetDebug.object2IntEntrySet());
            StringBuilder stringBuilder = new StringBuilder("Received Packets (x%total%): ");
            boolean isFirst = true;
            int total = 0;

            packetDebug.clear();

            for (Entry<String, Integer> packetEntry : entries) {
                String packetType = packetEntry.getKey();
                int amount = packetEntry.getValue();

                if (isFirst) {
                    isFirst = false;
                } else {
                    stringBuilder.append(", ");
                }

                stringBuilder.append("x").append(amount).append(" ").append(packetType);
                total += amount;
            }

            debug(stringBuilder.toString().replace("%total%", String.valueOf(total)));
        }
    }

    public void debug(String message) {
        if (this.debug) {
            this.logger.info(message);
        }
    }

    public void setNotifications(String playerName, boolean input) {
        if (input) {
            notifications.add(playerName);
        } else {
            notifications.remove(playerName);
        }
    }

    public boolean isNotifications(String playerName) {
        return notifications.contains(playerName);
    }

    public boolean isDebug() {
        return debug;
    }

    public Collection<String> getNotifications() {
        return notifications;
    }

    public void sendNotification(String check, ExploitPlayer player, int violations) {
        if (isEnabled() && player != null) {
            int ping = player.getPing();
            String notification = getMessage().replace("%player%", player.getName()).replace("%check%", check)
                    .replace("%ping%", String.valueOf(ping)).replace("%vls%", String.valueOf(violations));
            ConsoleCommandSender console = server.getConsoleSender();

            console.sendMessage(notification);

            for (String notificationPlayerName : getNotifications()) {
                Player notificationPlayer = server.getPlayer(notificationPlayerName);

                if (notificationPlayer != null) {
                    notificationPlayer.sendMessage(notification);
                }
            }
        }
    }

    @Override
    public String getName() {
        return "Notifications";
    }
}
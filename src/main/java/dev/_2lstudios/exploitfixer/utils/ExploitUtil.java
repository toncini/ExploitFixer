package dev._2lstudios.exploitfixer.utils;

import dev._2lstudios.exploitfixer.exploit.BukkitExploitPlayer;
import dev._2lstudios.exploitfixer.managers.ExploitPlayerManager;
import dev._2lstudios.exploitfixer.managers.ModuleManager;
import dev._2lstudios.exploitfixer.modules.impl.ItemsFixModule;
import dev._2lstudios.exploitfixer.modules.impl.NotificationsModule;
import dev._2lstudios.exploitfixer.modules.impl.PacketsModule;
import dev._2lstudios.hamsterapi.hamsterplayer.HamsterPlayer;
import org.bukkit.FireworkEffect;
import org.bukkit.Material;
import org.bukkit.block.BlockState;
import org.bukkit.entity.Player;
import org.bukkit.event.Cancellable;
import org.bukkit.inventory.InventoryHolder;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.FireworkMeta;
import org.bukkit.inventory.meta.ItemMeta;

import java.nio.charset.StandardCharsets;
import java.util.Collection;
import java.util.List;

public class ExploitUtil {
    private final ExploitPlayerManager exploitPlayerManager;
    private final ItemsFixModule itemsFixModule;
    private final NotificationsModule notificationsModule;
    private final PacketsModule packetsModule;

    public ExploitUtil(ModuleManager moduleManager) {
        this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
        this.itemsFixModule = moduleManager.getItemsFixModule();
        this.notificationsModule = moduleManager.getNotificationsModule();
        this.packetsModule = moduleManager.getPacketsModule();
    }

    private boolean checkBlockState(BlockStateMeta meta) {
        if (meta.hasBlockState()) {
            BlockState blockState = meta.getBlockState();

            if (blockState instanceof InventoryHolder) {
                InventoryHolder inventoryHolder = (InventoryHolder) blockState;

                for (ItemStack item : inventoryHolder.getInventory().getContents()) {
                    return checkItem(item);
                }
            }
        }

        return true;
    }

    private boolean checkBook(BookMeta meta) {
        String title = meta.getTitle();

        if (title != null && title.length() > 32) {
            return false;
        }

        String author = meta.getAuthor();

        if (author != null && author.length() > 16) {
            return false;
        }

        if (meta.getPageCount() > 50) {
            return false;
        }

        int dataBytesBook = packetsModule.getDataBytesBook();

        for (String page : meta.getPages()) {
            int pageBytes = page.getBytes(StandardCharsets.UTF_8).length;

            if (pageBytes > dataBytesBook) {
                return false;
            }
        }

        return true;
    }

    private boolean checkFirework(FireworkMeta meta) {
        if (meta.getPower() > 3) {
            return false;
        }

        if (meta.hasEffects()) {
            if (meta.getEffectsSize() > 12) {
                return false;
            }

            for (FireworkEffect effect : meta.getEffects()) {
                if (effect.getColors().size() > 6) {
                    return false;
                }

                if (effect.getFadeColors().size() > 6) {
                    return false;
                }
            }
        }

        return true;
    }

    public boolean checkItem(ItemStack item) {
        try {
            if (item != null && item.hasItemMeta()) {
                ItemMeta itemMeta = item.getItemMeta();

                if (itemMeta != null) {
                    String displayName = itemMeta.getDisplayName();

                    if (displayName != null && displayName.length() > 1536) {
                        return false;
                    }

                    List<String> lore = itemMeta.getLore();

                    if (lore != null && lore.size() > 64) {
                        return false;
                    }

                    if (itemMeta instanceof BookMeta) {
                        return checkBook((BookMeta) itemMeta);
                    } else if (itemMeta instanceof BlockStateMeta) {
                        return checkBlockState((BlockStateMeta) itemMeta);
                    } else if (itemMeta instanceof FireworkMeta) {
                        return checkFirework((FireworkMeta) itemMeta);
                    }
                }
            }

        } catch (IllegalArgumentException ex) {
            return false;
        }

        return true;
    }

    public boolean checkSign(String[] linesString) {
        int dataBytesSign = packetsModule.getDataBytesSign();

        if (linesString != null && dataBytesSign > 0) {
            if (linesString.length > 4) {
                return true;
            } else {
                for (String line : linesString) {
                    if (line.getBytes(StandardCharsets.UTF_8).length > dataBytesSign) {
                        return false;
                    }
                }
            }
        }

        return true;
    }

    public String clearIfBlacklisted(ItemStack itemStack) {
        Collection<String> blacklist = itemsFixModule.getBlacklist();
        String materialName = itemStack.getType().toString();

        if (blacklist != null && blacklist.contains(materialName)) {
            itemStack.setType(Material.AIR);
            itemStack.setItemMeta(null);
            return materialName;
        }

        return null;
    }

    public void addVls(Cancellable event, HamsterPlayer hamsterPlayer, Player player,
                       double vls) {
        if (vls > 0) {
            BukkitExploitPlayer exploitPlayer = exploitPlayerManager.get(player);

            exploitPlayer.addVls(event, hamsterPlayer, packetsModule, vls);
        }
    }

    public void cancelExploit(Cancellable event, HamsterPlayer hamsterPlayer, Player player,
                              String reason, double vls) {
        notificationsModule.debug(reason);
        event.setCancelled(true);

        addVls(event, hamsterPlayer, player, vls);
    }
}

package dev._2lstudios.exploitfixer.utils;

import dev._2lstudios.exploitfixer.configuration.BukkitConfiguration;
import dev._2lstudios.exploitfixer.configuration.IConfiguration;
import org.bukkit.Bukkit;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.plugin.Plugin;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.logging.Logger;

public class BukkitConfigurationUtil implements IConfigurationUtil {
    private static final String DATA_FOLDER_PLACEHOLDER = "%datafolder%";
    private final String dataFolderPath;
    private final String prefix;
    private final Logger logger;
    private final Plugin plugin;
    private final ClassLoader classLoader;

    public BukkitConfigurationUtil(Plugin plugin) {
        this.plugin = plugin;
        this.logger = plugin.getLogger();
        this.classLoader = plugin.getClass().getClassLoader();
        this.dataFolderPath = plugin.getDataFolder().toString();
        this.prefix = "[" + plugin.getName() + "]";
    }

    private void createParentFolder(File file) {
        File parentFile = file.getParentFile();

        if (parentFile != null) {
            parentFile.mkdirs();
        }
    }

    public IConfiguration get(String path) {
        File file = new File(path.replace(DATA_FOLDER_PLACEHOLDER, dataFolderPath));

        if (file.exists()) {
            return new BukkitConfiguration(YamlConfiguration.loadConfiguration(file));
        } else {
            return new BukkitConfiguration(new YamlConfiguration());
        }
    }

    public void create(String rawPath, String resourcePath) {
        String path = rawPath.replace(DATA_FOLDER_PLACEHOLDER, dataFolderPath);

        InputStream inputStream = null;
        try {
            File configFile = new File(path);

            if (!configFile.exists()) {
                inputStream = classLoader.getResourceAsStream(resourcePath);

                createParentFolder(configFile);

                if (inputStream != null) {
                    Files.copy(inputStream, configFile.toPath());
                } else {
                    configFile.createNewFile();
                }

                logger.info(prefix + " File '" + path + "' has been created!");
            }
        } catch (IOException e) {
            logger.info(prefix + " Unable to create '" + path + "'!");
        } finally {
            if (inputStream != null) {
                try {inputStream.close();} catch (IOException ignored) {}
            }
        }
    }

    public void save(IConfiguration configuration, String rawPath) {
        String path = rawPath.replace(DATA_FOLDER_PLACEHOLDER, dataFolderPath);

        Bukkit.getScheduler().runTaskAsynchronously(plugin, () -> {
            try {
                ((YamlConfiguration) configuration.getObject()).save(path);

                logger.info(prefix + " File '" + path + "' has been saved!");
            } catch (IOException e) {
                logger.info(prefix + " Unable to save '" + path + "'!");
            }
        });
    }

    public void delete(String rawPath) {
        String path = rawPath.replace(DATA_FOLDER_PLACEHOLDER, dataFolderPath);

        Bukkit.getScheduler().runTaskAsynchronously(plugin, () -> {
            try {
                Files.delete(new File(path).toPath());

                logger.info(prefix + " File '" + path + "' has been removed!");
            } catch (IOException e) {
                logger.info(prefix + " Unable to remove '" + path + "'!");
            }
        });
    }
}